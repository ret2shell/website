const n=`在所有编程语言中，最不可缺少的部分就是**函数**。函数是一段可重用的代码，它接收一些参数，对其进行处理，产生一些副作用，然后返回另一些东西。使用函数的目的是封装他们所做的事情，调用者只需要关注函数的具体用法即可。

## \`fn\` 关键字

在 Rune 中，函数的定义使用 \`fn\` 关键字。在之前的示例中，你大概已经看到了，每个示例都使用了 \`fn main\`。\`main\` 函数并不特殊，它只是 Rune 解释器在运行脚本时默认调用的函数。

与 Rust 不同， Rune 中的函数不需要指定返回类型。作为一种动态脚本语言，函数可以返回任意内容，甚至同一个函数可以返回不同类型的结果。

\`\`\`rust
fn foo(condition) {
    if condition {
        "Hello"
    } else {
        1
    }
}

pub fn main() {
    println(\`\${foo(true)}\`);
    println(\`\${foo(false)}\`);
}
\`\`\`

\`\`\`text
$ cargo run --bin rune -- run scripts/functions/return_value.rx
Hello
1
\`\`\`

你可能也注意到了，Rune 中的函数声明与 Rust 十分相似，但是没有任何类型标注，参数也是。这么做的优点很容易看出来：脚本的可读性很高，编写起来也很简洁；而缺点也是显而易见的，类型错误只能在运行时才能发现，编写者需要花费更多的精力，使用额外的代码来确保参数的类型。
`;export{n as default};
