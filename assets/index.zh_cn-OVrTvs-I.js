const n='Rune 中将数据类型区分为两种，一种是**基本类型**（也可以称为**原语 Primitive**），另一种是**引用类型 Reference**。\n\n## 基本类型\n\n基本类型是直接存储在堆栈上的类型。在 Rune 的解释器实现中，基本类型都实现了 `Copy` 特性，因此在你操作这些类型时，涉及数据移动的操作都会创建基础值的不同副本，复制后的副本之间不会相互影响。\n\nRune 中的基本类型有：\n\n* 单元类型（空元组） `()`，表示没有值；\n* 布尔值 `bool`，表示逻辑值 `true` 或 `false`；\n* 字节 `u8`，例如 `b\'\\xff\'`；\n* 字符 `char`，例如 `\'a\'` 或者 `\'👴\'`，其中 `\'👴\'` 是一个 4 字节的宽 Unicode 字符；\n* 整数 `i64`，例如 `114514`，整数都是 64 位有符号整数；\n* 浮点数 `f64`，例如 `1919.810`，浮点数都是 64 位双精度浮点数；\n* 静态字符串，例如 `"hello"`，静态字符串是不可变的；\n\n当你将这些数据分配给不同的变量时，将会自动创建值的单独副本：\n\n```rust\npub fn main() {\n    let a = 1;\n    let b = a;\n    a = 2;\n    println(`{a}`);\n    println(`{b}`);\n}\n```\n\n```\n$ ret2script scripts/primitives/copy.rx\n2\n1\n```\n\n基本类型都由小写字母开头，而引用类型则由大写字母开头。\n\n## 引用类型\n\n其他类型（例如*字符串*）通过引用存储。引用类型是指向堆上数据的指针，在对引用类型进行赋值或移动操作时，被复制的只是引用，所有衍生的变量都指向同一个基础数据。\n\n```rust\npub fn main() {\n    let a = String::from("Hello");\n    let b = a;\n    a.push_str(" World");\n    println(a);\n    println(b);\n}\n```\n\n```\n$ ret2script scripts/primitives/reference.rx\n"Hello World"\n"Hello World"\n```\n\nRune 支持的一些引用类型有：\n\n* 字符串 `String`，例如 `String::from("Hello")`；\n* 向量 `Vec`，例如 `[1, 2, 3]`；\n* 对象 `Object`，例如 `#{ "name": "Rune" }`；\n* 元组 `Tuple`，例如 `(1, 2, 3)`；\n';export{n as default};
